version: "3.9"

services:
  web:
    image: ${LEUGENS_WEB_IMAGE}
    env_file:
      - ../../env/global.env
      - ../../env/leugens.env
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy_default
      - traefik.http.routers.leugens.rule=Host(`${LEUGENS_WEB_HOST}`)
      - traefik.http.routers.leugens.entrypoints=websecure
      - traefik.http.routers.leugens.tls.certresolver=le
      - traefik.http.services.leugens.loadbalancer.server.port=80
    volumes:
      - flags:/mnt/flags
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - proxy
      - app

  api:
    image: ${LEUGENS_API_IMAGE}
    env_file:
      - ../../env/global.env
      - ../../env/leugens.env
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy_default
      - traefik.http.routers.leugens-api.rule=Host(`${LEUGENS_API_HOST}`)
      - traefik.http.routers.leugens-api.entrypoints=websecure
      - traefik.http.routers.leugens-api.tls.certresolver=le
      # Also serve the API under the web host on path /api to support
      # frontends that call relative URLs (e.g., fetch('/api/...')).
      # This avoids serving the SPA index.html for /api/* on the web container.
      - traefik.http.routers.leugens-api-path.rule=Host(`${LEUGENS_WEB_HOST}`) && PathPrefix(`/api`)
      - traefik.http.routers.leugens-api-path.entrypoints=websecure
      - traefik.http.routers.leugens-api-path.tls=true
      - traefik.http.routers.leugens-api-path.tls.certresolver=le
      - traefik.http.routers.leugens-api-path.priority=100
      - traefik.http.routers.leugens-api-path.service=leugens-api
      - traefik.http.services.leugens-api.loadbalancer.server.port=8080
    volumes:
      - flags:/mnt/flags
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - proxy
      - app

  postgres:
    image: postgres:16-alpine
    env_file:
      - ../../env/leugens.env
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app

networks:
  proxy:
    external: true
    name: proxy_default
  app:
    driver: bridge

volumes:
  flags:
  pgdata:
    external: true
    name: ${LEUGENS_PGDATA_VOLUME:-leugens_pgdata}
